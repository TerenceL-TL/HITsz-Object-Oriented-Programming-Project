@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class SuperEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + SuperEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class BossEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- SuperEnemy
AbstractAircraft <|-- BossEnemy

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- MobEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class BaseProp {
    - imme_effect:boolean
    - effect_time:double
    + isImme_effect():boolean
    + get_effect_time():double
    + forward():void
    + {abstract} effect(HeroAircraft obj):void
}

class BombProp{
    + BombProp(int locationX, int locationY, int speedX, int speedY, boolean imme_effect, double effect_time)
    + effect(HeroAircraft obj):void
}

class FireBuffProp{
    - FireBuff:int
    + changeFireBuff(int FireBuff):void
    + GetFireBuff():int
    + FireBuffProp(int locationX, int locationY, int speedX, int speedY, boolean imme_effect, double effect_time, int FireBuff)
    + effect(HeroAircraft obj):void
}

class HealProp{
    - HealHp:int
    + changeHealHp(int HealHp):void
    + GetHealHp():int
    + HealProp(int locationX, int locationY,
                                  int speedX, int speedY,
                                  boolean imme_effect, double effect_time,
                                  int HealHp)
    + effect(HeroAircraft obj):void
}

BaseProp <|-- BombProp
BaseProp <|-- FireBuffProp
BaseProp <|-- HealProp

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

interface EnemyFactory{
    + {abstract} createEnemy():AbstractAircraft
}

class MobEnemyFactory{
    - {static} speedX
    - {static} speedY
    - {static} hp
    + {static} setSpeedX(int _speedX):void
    + {static} setSpeedY(int _speedY):void
    + {static} setHp(int _hp):void
    + createEnemy():AbstractAircraft
}

class EliteEnemyFactory{
    - {static} speedX
    - {static} speedY
    - {static} hp
    + {static} setSpeedX(int _speedX):void
    + {static} setSpeedY(int _speedY):void
    + {static} setHp(int _hp):void
    + createEnemy():AbstractAircraft
}

class SuperEnemyFactory{
    - {static} speedX
    - {static} speedY
    - {static} hp
    + {static} setSpeedX(int _speedX):void
    + {static} setSpeedY(int _speedY):void
    + {static} setHp(int _hp):void
    + createEnemy():AbstractAircraft
}

class BossEnemyFactory{
    - {static} speedX
    - {static} speedY
    - {static} hp
    + {static} setSpeedX(int _speedX):void
    + {static} setSpeedY(int _speedY):void
    + {static} setHp(int _hp):void
    + createEnemy():AbstractAircraft
}

EnemyFactory <|.. MobEnemyFactory
EnemyFactory <|.. EliteEnemyFactory
EnemyFactory <|.. SuperEnemyFactory
EnemyFactory <|.. BossEnemyFactory

interface PropFactory{
    + {abstract} createProp(int spawnX, int spawnY, int speedX, int speedY):BaseProp
}

class BombPropFactory{
    + createProp(int spawnX, int spawnY, int speedX, int speedY):BaseProp
}

class FireBuffPropFactory{
    + createProp(int spawnX, int spawnY, int speedX, int speedY):BaseProp
}

class HealPropFactory{
    + createProp(int spawnX, int spawnY, int speedX, int speedY):BaseProp
}

PropFactory <|.. BombPropFactory
PropFactory <|.. FireBuffPropFactory
PropFactory <|.. HealPropFactory



@enduml